
	Javascript

		<script defer ....   defer = adiar
			Indicate to a browser that the script is meant to be executed after the document
			has been parsed, but before firing DOMContentLoaded.
			Scripts with defer attribute will prevent the DOMContentLoaded event from firing
			until the script has loaded and finished evaluating.
			Defer respects the order that it appears!!

		Functional Components | Stateless Components

? prototype compartilha algo com todas as instâncias similares			

		operador [ spred ] -> ... -> "abre" o objeto e/ou recebe todo o conteúdo dele
		
			setColaboradores([...colaboradores, colaborador]);
			abre um array de colaboradores dentro
			de um novo array e adiciona o novo
			colaborador por último

		Spread syntax (...) -> allows an iterable such as an array expression
		or string to be expanded in places where zero or more arguments (for function calls) or
		elements (for array literals) are expected, or an object expression to be expanded in places
		where zero or more key-value pairs (for object literals) are expected.
		
		array.concat(valor):
		
			cria um novo array e adiciona um novo valor para ele no final
			
		array.join(separador)

			adds all the elements of an array into a string, separated by the specified separator string

		Destructuring Assignment
		
			const { onClick, text } = props
			var [firstName,,thirdName] = ["alpha", "beta", "gamma", "delta"];
			var [firstName,,...lastName] = ["alpha", "beta", "gamma", "delta"];
			[x, y, ...restof] = [10, 20, 30, 40, 50];
			
		Template Literals
		`${NomeDaVariavel ou (javascript que resulta em string)}` aqui dentro aceita single e double quote
		https://www.w3schools.com/js/js_string_templates.asp
		
		foreach - quando se quer percorrer um objeto apenas
			products.forEach((product) => {
				product.category
			});	
		
		map - quando se quer percorrer e retornar algo manipulado, um novo array manipulado
		
			O método map() invoca a função callback passada por argumento para cada elemento
			do Array e devolve um novo Array como resultado.
			
			var numbers = [1, 4, 9];
			var doubles = numbers.map(function(currentValue) { return currentValue * 2; });
			// doubles é agora [2, 8, 18]. numbers ainda é [1, 4, 9]
			ou mais curto:
 			  var doubles = numbers.map(function(numero) => {numero * 2}) ou var doubles = numbers.map(numero => numero * 2)
			  
		reduce - quando se quer interagir entre os valores do array
		
			O método reduce() executa uma função reducer (fornecida por você) para cada elemento
			do array, resultando num único valor de retorno.

			const array1 = [1, 2, 3, 4];

			// 0 + 1 + 2 + 3 + 4
			const initialValue = 0;
			const sumWithInitial = array1.reduce((previousValue, currentValue) => previousValue + currentValue, initialValue);
			
		filter - quando se quer filtrar, incluir critérios, etc.
		
			O método filter() cria um novo array com todos os elementos que passaram no teste
			implementado pela função fornecida.

			function checkAdult(age) {
			  return age >= 18;
			}		

			const ages = [32, 33, 16, 40];
			const result = ages.filter(checkAdult);		

		event
			event.target.value
			event.target.tagName
		
			https://developer.mozilla.org/en-US/docs/Web/API/Event
		
		element
		
			https://developer.mozilla.org/en-US/docs/Web/API/Element