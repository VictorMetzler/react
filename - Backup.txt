
npm install react-scripts --save

	map - quando se quer percorrer, algo simples
	
		O método map() invoca a função callback passada por argumento para cada elemento
		do Array e devolve um novo Array como resultado.
		
		var numbers = [1, 4, 9];
		var doubles = numbers.map(function(currentValue) { return currentValue * 2; });
		// doubles é agora [2, 8, 18]. numbers ainda é [1, 4, 9]

	reduce - quando se quer interagir entre os valores do array
	
		O método reduce() executa uma função reducer (fornecida por você) para cada elemento
		do array, resultando num único valor de retorno.

		const array1 = [1, 2, 3, 4];

		// 0 + 1 + 2 + 3 + 4
		const initialValue = 0;
		const sumWithInitial = array1.reduce((previousValue, currentValue) => previousValue + currentValue, initialValue);
		
	filter - quando se quer filtrar, incluir critérios, etc.
	
		O método filter() cria um novo array com todos os elementos que passaram no teste
		implementado pela função fornecida.

		function checkAdult(age) {
		  return age >= 18;
		}		

		const ages = [32, 33, 16, 40];
		const result = ages.filter(checkAdult);


When you use console.log for debugging, don't combine objects
in a Java-like fashion by using the plus operator. Instead of writing:

	console.log('props value is ' + props)
	Separate the things you want to log to the console with a comma:
	console.log('props value is', props)

	If you use the Java-like way of concatenating a string with an object,
	you will end up with a rather uninformative log message:

	props value is [Object object]

Whereas the items separated by a comma will all be available in the
browser console for further inspection.

Logging to the console is by no means the only way of debugging our applications.
You can pause the execution of your application code in the Chrome developer console's
debugger, by writing the command debugger anywhere in your code.

The execution will pause once it arrives at a point where the debugger command gets executed.
The debugger also enables us to execute our code line by line with the controls found on the
right-hand side of the Sources tab.

You can also access the debugger without the debugger command by adding breakpoints in the
Sources tab. Inspecting the values of the component's variables can be done in the Scope-section

It is highly recommended to add the React developer tools extension to Chrome. It adds a new
Components tab to the developer tools. The new developer tools tab can be used to inspect
the different React elements in the application, along with their state and props:

Dev tools shows the state of hooks in the order of their definition.


Instalar:
	
	Visual Studio,
	   caso o acima não instale, também baixar o NodeJS que instala o NPM junto
	GIT for windows

Visual Studio	
	
	Em baixo a esquerda, ícone "Contas", fazer login para carregar as configurações salvas.
	
	Tem um ícone em baixo a esquerda do react Git, logar conta e clocar a pasta react.
	
	Shift + Alt + F  formata com Pretier	

	ctrl + ' para abrir o terminal:

	npx create-react-app my-project --use-npm
	 or create-react-app ./  se já estiver na pasta com o nome do app
		webpack - a file bundler
		webpack Dev Server - a development sever
		Babel - a transpiler (Source-to-source compiler) - jsx
		Several polyfills
		ESLint - A linter (Find and fix problems in your JavaScript code)
		Jest - The React testing library
		
		arrow function () => {} garante o this, utilizar na construção não na chamada

	npm start - open in http://localhost:3000/	
	
		se der: "start": "react-scripts start"
		substirui isso: "start": "react-scripts start",
		por isso: "start": "react-scripts --openssl-legacy-provider start",
	
	npm run build - create a minified bundle to deploy to production

		


Material UI

	import { CssBaseline } from '@material-ui/core';
	<CssBaseline />
	<App />
	
	Incluir ou não ?? shrink-to-fit=no ??
	<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />
	
	<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />

	Thema -> ThemeProvider, createMuiTheme
	
	Styles -> makeStyles

	Icons -> npm install @material-ui/icons	
	
