
npm install react-scripts --save

When you use console.log for debugging, don't combine objects
in a Java-like fashion by using the plus operator. Instead of writing:

	console.log('props value is ' + props)
	Separate the things you want to log to the console with a comma:
	console.log('props value is', props)

	If you use the Java-like way of concatenating a string with an object,
	you will end up with a rather uninformative log message:

	props value is [Object object]

Whereas the items separated by a comma will all be available in the
browser console for further inspection.

Logging to the console is by no means the only way of debugging our applications.
You can pause the execution of your application code in the Chrome developer console's
debugger, by writing the command debugger anywhere in your code.

The execution will pause once it arrives at a point where the debugger command gets executed.
The debugger also enables us to execute our code line by line with the controls found on the
right-hand side of the Sources tab.

You can also access the debugger without the debugger command by adding breakpoints in the
Sources tab. Inspecting the values of the component's variables can be done in the Scope-section

It is highly recommended to add the React developer tools extension to Chrome. It adds a new
Components tab to the developer tools. The new developer tools tab can be used to inspect
the different React elements in the application, along with their state and props:

Dev tools shows the state of hooks in the order of their definition.



	